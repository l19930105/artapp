# encoding=utf-8
安卓性能监控优化记录   --刘斌宇

01  20180522  引入其他文件夹的py文件（导包技巧）
----------------------------------------------------------------------
import sys
import os

# 获取引入文件的文件夹
sys.path.append(os.getcwd() + '\\commons')
import email_class
----------------------------------------------------------------------

03   20180523  记录整个执行的时间
-----------------------------------------------------------------------
import time

# 存入程序开始时间
start = time.clock()
...
...
# 存入结束时间
end = time.clock()
print("整个测试总共花费了 %.1f 秒" % (end - start))
-----------------------------------------------------------------------

04   20180530 cvs文件使用时间戳的形式，避免重复数据被覆盖
-----------------------------------------------------------------------
# 获取当前时间 可确保测试报告文件不重名
now = time.strftime("%Y-%m-%d %H_%M_%S")
csvName = now + ' APPstatus.csv'
-----------------------------------------------------------------------

05   20180607  代码整合
-----------------------------------------------------------------------
所以性能数据代码整合
实现抓取CPU、内存、电量、流量的数据。
启动时间（热启动、冷启动）在lauchTime中获取
-----------------------------------------------------------------------

06   20180612  引入easygui，性能监控前弹窗输入监控场景
-----------------------------------------------------------------------
import easygui as g
self.msg = g.enterbox(msg="请输入你要监控的使用场景", title="监控APP专项数据")

csvName = "【" + self.msg + "】" + now + ' APPstatus.csv'
-----------------------------------------------------------------------

07   20180615  增加“获取当前设备名”名称，判断是否有且只有个移动设备被监控，以免后续监控数据时报错
     并用easygui弹窗提示，如果不符合条件则退出程序
-----------------------------------------------------------------------
    # 获取当前设备名
    def get_devices(self):
        devices = []
        result = subprocess.Popen("adb devices", shell=True, stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE).stdout.readlines()
        # print(result[1].decode())
        print(">>>命令结果 len(result)" + str(len(result)))
        if len(result) - 2 == 1:
            for line in result[1:]:
                devices.append(line.strip().decode())
            print("当前设备名为： " + str(devices[0].split()[0]))
            return devices[0].split()[0]
        else:
            # 如果没有设备弹窗提示，并退出程序
            g.msgbox(image='Warning.gif', msg="当前没有移动设备或不止一个设备!!!")
            sys.exit(0)

        return devices[0]
-----------------------------------------------------------------------

08  20180618  增加获取包名和获取activity，打印输出在控制台，输出监控app的包名和activity
-----------------------------------------------------------------------
 # 获取包名
    def getpackagename(self):
        pattern = re.compile(r"[a-zA-Z0-9\.]+/.[a-zA-Z0-9\.]+")
        package = subprocess.Popen("adb shell dumpsys activity | findstr  mFocusedActivity", shell=True,
                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.read()
        package = (str(package))
        packagename = pattern.findall(package)[0].split('/')[0]
        print("测试app包名为： " + str(packagename))
        # print (pattern.findall(package)[0].split('/')[0])
        # print (pattern.findall(package)[0].split('/')[1])
        return packagename

    # 获取activity
    def getactivity(self):
        pattern = re.compile(r"[a-zA-Z0-9\.]+/.[a-zA-Z0-9\.]+")
        package = subprocess.Popen("adb shell dumpsys activity | findstr  mFocusedActivity", shell=True,
                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.read()
        package = (str(package))
        activity = pattern.findall(package)[0].split('/')[1]
        print("测试activity包名为： " + str(activity))
        return activity

 # 获取监控app的包名
 controller.getpackagename()
 # 获取监控app的activity
 controller.getactivity()
-----------------------------------------------------------------------

09   20180618 增加程序运行完后的弹窗提醒，避免一直傻傻的等
-----------------------------------------------------------------------
    # 避免等待，提前告知结束
    g.msgbox("代码运行结束了！", image='Warning.gif')
----------------------------------------------------------------------

10   20180620  优化获取电量的命令，提前切换成非充电模式
-----------------------------------------------------------------------
# 手机连接到电脑，默认为充电状态
# 切换手机电池为非充电状态  --2 为充电状态
os.popen("adb shell dumpsys battery set status 1")

# 测试完后切换手机电池为充电状态  --2 为充电状态
os.popen("adb shell dumpsys battery set status 2")
print("已切换回充电模式...")
-----------------------------------------------------------------------

11   20180620  获取pid和uid
-----------------------------------------------------------------------
    # 获取pid
    # PID是进程的身份标识，程序一旦运行，就会给应用分配一个独一无二的PID
    self.pid = ""        # pid
    self.uid = ""        # uid

    def get_pid(self):
        pid_list = []
        cmd = 'adb -s ' + self.get_devices() + ' shell ps |findstr ' + self.getpackagename()
        pid_info = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.readlines()
        if len(pid_info) >= 1:
            pid_list.append(int(pid_info[0].split()[1]))
        return str(pid_list[0])

    # 获取uid
    # UID 指用户ID 为了实现数据共享，android为每个应用几乎都分配了不同的UID，不像传统的linux，每个用户相同就为之分配相同的UID
    def get_uid(self):
        uid_list = []
        cmd = 'adb -s ' + self.get_devices() + ' shell cat  /proc/' + self.get_pid() + '/status'
        uid_info = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.readlines()
        if len(uid_info) >= 1:
            uid_list.append(int(uid_info[6].split()[1]))
        return str(uid_list[0])
-----------------------------------------------------------------------------

12   20180705 增加预警值，超过cpu和mem预警值就记录在表格，并记录当前activity和异常信息
-----------------------------------------------------------------------------
   self.alldata = [("timestamp", "CPU", "内存", "电量", "流量", "pid", "uid", "CPU异常信息", "内存异常信息", "activity")]
   self.max_cpu = 70    # cpu预警值
   self.max_mem = 300   # mem预警值

   # 如果cpu超过预警值 提示
   if float(self.cpuvalue) > self.max_cpu:
      # print("cpu爆表啦，快去看看" + str(self.cpuvalue))
      # 记录cpu异常信息
      self.abnormal_cpu_msg = "当前cpu值超过预警值" + str(self.max_cpu) + "%"
      # CPU超过预警就记录当前activity
      self.activity = self.getactivity()

   if int(round(int(self.mem[:-1]) / 1024)) > self.max_mem:
      # CPU超过预警就记录当前activity
      self.activity = self.getactivity()
      # 记录mem异常信息
      self.abnormal_mem_msg = "当前mem值超过预警值" + str(self.max_mem) + "M"
